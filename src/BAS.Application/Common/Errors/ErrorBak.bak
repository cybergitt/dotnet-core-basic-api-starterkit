using Microsoft.AspNetCore.Http;

namespace BAS.Application.Common.Errors
{
    public class ErrorBak(string code, string message, int? status) : IEquatable<ErrorBak>
{
    public static readonly ErrorBak None = new(string.Empty, string.Empty, null);
    public static readonly ErrorBak NullValue = new("Error.NullValue", "The specified result value is null.", StatusCodes.Status204NoContent);

    public string Code { get; } = code;
    public string Message { get; } = message;
    public int? Status { get; } = status ?? StatusCodes.Status500InternalServerError;

    public static ErrorBak Combine(params Error[] errors)
    {
        var combinedMessage = string.Join("; ", errors.Select(e => e.Message));
        return new ErrorBak("Multiple.Errors", combinedMessage, StatusCodes.Status207MultiStatus);
    }

    public static implicit operator string(Error error) => error.Code;

    public static bool operator ==(ErrorBak? a, ErrorBak? b) => a?.Equals(b) ?? b is null;
    public static bool operator !=(ErrorBak? a, ErrorBak? b) => !Equals(a, b);

    public virtual bool Equals(ErrorBak? other) =>
        other is not null && Code == other.Code && Message == other.Message;

    public override bool Equals(object? obj) => obj is ErrorBak error && Equals(error);
    public override int GetHashCode() => HashCode.Combine(Code, Message);
    public override string ToString() => Code;
}
}
